리액트란
React : 사용자 인터페이스를 만들기 위한 자바스크립트 라이브러리

라이브러리 : 자주 사용되는 기능들을 정리해 모아놓은 모음집

사용자 인터페이스 (UI)
: 사용자와 컴퓨터 프로그램이 서로 상호작용 하기 위해 중간에서 서로 간에 입력과 출력 제어
ex) 웹사이트 : 버튼, 텍스트 입력창 = 사용자 인터페이스
버튼을 누름으로써 웹사이트에서 반응, 웹사이트에서 특정 페이지를 보여줌 > 사용자 반응

사용자 인터페이스를 만들기 위한 기능 모음집 : UI 라이브러리
화면을 만들기 위한 기능들을 모아 놓은 것

대표적인 자바스크립트 UI 라이브러리
: ANGULARJS(사실상 공식지원 종료, 구글에서 만든 오픈소스 프로젝트) , 
React (reactjs,  Meta로 이름이 바뀐 페이스북에서 만든 오픈소스 자바스크립트 UI 라이브러리)
Vue.js (중국인 개발자 한 명이 시작한 오픈소스 프로젝트)

Angular js , Vue.js  : 프레임 워크
React : 라이브러리

프레임 워크 VS 라이브러리 
- 프로그램의 흐름에 대한 제어 권한 차이
프레임워크 : 흐름의 제어 권한을 개발자가 아닌 프레임워크가 갖음
라이브러리 : 흐름에 대한 제어 X, 개발자가 필요한 부분만 필요할 떄 가져다 사용
ㄴ 제어권한은 개발자에게 있음.

SPA 하나의 페이지만 존재하는 앱
: 하나의 html 틀을 만들어 놓고 사용자가 특정 페이지를 요청할 때 그 안에 해당  페이지의 내용을 채워 보내줌
react가 이러한 spa를 쉽고 빠르게 만들 수 있도록 해주는 도구

리액트의 장점
 -빠른 업데이트 & 렌더링 속도
: 웹사이트를 탐색시 화면에 나타내는 내용이 바뀌는 것(업데이트) 이 빠름
ㄴVirtual DOM 사용 : 가상의 DOM, 웹페이지와 실제 DOM 사이에서 중간 매개체 역할.
Document Object Model : 웹페이지를 정의하는 하나의 객체, 
하나의 웹사이트에 대한 정보를 담고있는 큰 그릇.
--기존의 방식으로 화면 업데이트 시 
: DOM 직접 수정 (수정 부분 DOM의 데이터에서 모두 찾아야 함)
: 성능에 큰 영향 미침, 비용도 굉장히 많이 듬.
--리액트의 업데이트 방식 
: 업데이트해야 할 최소한의 부분만을 찾아 업데이트
--어떤 상태의 변경, 스테이트 체인지가 일어날시
VOM : 업데이트해야 될 최소한의 부분 검색, 컴퓨트 딥
검색된 부분만을 업데이트, 다시 렌더링, 변경된 내용 빠르게 사용자에게 보여줌
 -컴포넌트 기반 구조
:컴포넌트(구성요소), 리액트에서는 모든 페이지가 컴포넌트로 구성
하나의 컴포넌트는 또 다른 여러 개의 컴포넌트의 조합으로 구성 가능
레고 블록 조립하듯 컴포넌트들을 모아 개발 [ex)에어비앤비]
장점 : 재사용성 높음( 여러 모듈간의 의존성이 낮음) > 개발 기간 단축, 유지 보수 용이
>>>  각 컴포넌트들은 웹사이트의 여러곳에서 반복적 사용 가능
 -지원군, 큰 스폰서 존재 (Meta)
: Meta 에서 프로젝트를 종료하지 않는 한 계속 발전
 -활발한 지식공유 & 활성화 된 커뮤니티
: 개발 생태계, 커뮤니티 존재
 -리액트 네이티브 (모바일 환경 UI) 프레임워크 > 모바일 앱 개발 가능
: 보통 안드로이드 앱 (Kotlin), IOS (Swift) 별도의 프로그래밍 언어와 각각의 개발 프레임워크 배워야 함 
리액트 네이티브 사용시 자바스크립트로 한 번 코딩을 해 안드로이드, ios 앱 동시 생성가능.

리액트의 단점
 -방대한 학습량
: 기존과의 다른 방식의 UI 라이브러리 . 
(VOM, JSX, Component, State, Props 등 새로운 개념 등장)
 -높은 상태관리 복잡도
: state(리액트 컴포넌트의 상태), 
웹사이트의 규모가 커져 컴포넌트의 개수가 많이지면 상태 관리의 복잡도도 증가.
>큰 규모의 프로젝트의 경우 상태 관리를 위해 리덕스, 보백스, 리코일 등 외부 상태관리 라이브러리 사용
